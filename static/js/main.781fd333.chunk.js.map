{"version":3,"sources":["actions/EmployeeActions.js","actions/ActionTypes.js","components/Dashboard.jsx","connectors/DashboardConnector.js","components/Employee.jsx","connectors/EmployeeConnector.js","App.js","serviceWorker.js","reducers/InitialState.js","reducers/RootReducer.js","reducers/EmployeeReducer.js","store/ConfigureStore.js","index.js"],"names":["handleAuthentication","username","password","dispatch","setAuthentication","type","isAuthenticated","Dashboard","props","handleInputChange","e","setState","target","name","value","handleSubmit","state","this","to","className","style","minWidth","onChange","onClick","React","Component","DashboardConnector","connect","employeeReducer","EmployeeActions","Employee","setEmployeesData","employeesData","user","length","map","emp","index","empDetails","Object","entries","key","push","EmployeeConnector","App","exact","path","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","initialState","action","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.781fd333.chunk.js","sourcesContent":["import * as actionKeys from \"./ActionTypes\";\r\n\r\nexport const handleAuthentication = (username, password) => dispatch => {\r\n  if (username === \"hruday@gmail.com\" && password === \"hruday123\") {\r\n    dispatch(setAuthentication(true));\r\n  }\r\n  return {\r\n    type: actionKeys.HANDLE_AUTHENTICATION,\r\n    username,\r\n    password\r\n  };\r\n};\r\n\r\nexport const setAuthentication = (isAuthenticated) => {\r\n  return {\r\n    type: actionKeys.SET_AUTHENTICATION,\r\n    isAuthenticated\r\n  };\r\n};\r\n\r\nexport const setEmployeesData = employeesData => {\r\n  return {\r\n    type: actionKeys.SET_EMPLOYEES_DATA,\r\n    employeesData\r\n  };\r\n};\r\n","export const HANDLE_AUTHENTICATION = 'HANDLE_AUTHENTICATION';\r\nexport const SET_AUTHENTICATION = 'SET_AUTHENTICATION';\r\nexport const SET_EMPLOYEES_DATA = 'SET_EMPLOYEES_DATA';","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            password: \"\",\r\n            username: \"\"\r\n        }\r\n    }\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = () => {\r\n        this.props.handleAuthentication(this.state.username, this.state.password)\r\n    }\r\n    render() {\r\n        if (this.props.isAuthenticated) {\r\n            return (\r\n                <Redirect to=\"/employee\" />\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"login-container row no-gutters\">\r\n                <form>\r\n                    <div className=\"col-12\" >\r\n                        <label style={{ minWidth: 100 }}>Username</label>\r\n                        <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleInputChange} />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <label style={{ minWidth: 100 }}>Password</label>\r\n                        <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleInputChange} />\r\n                    </div>\r\n\r\n                </form>\r\n                <button onClick={this.handleSubmit}>Login</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","import {connect} from 'react-redux';\r\nimport * as EmployeeActions from '../actions/EmployeeActions';\r\nimport React from 'react';\r\nimport Dashboard from '../components/Dashboard';\r\n\r\nclass DashboardConnector extends React.Component {\r\n  render() {\r\n  return (\r\n      <Dashboard {...this.props}/>\r\n    )\r\n  }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.employeeReducer.isAuthenticated,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    handleAuthentication: (username, password) => dispatch(EmployeeActions.handleAuthentication(username, password)),\r\n  };\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DashboardConnector);","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as employeesData from './EmployeeList.json';\r\n\r\nclass Employee extends React.Component {\r\n    componentDidMount() {\r\n        this.props.setEmployeesData(employeesData.default.user)\r\n    }\r\n\r\n    render() {\r\n        \r\n        if (!this.props.isAuthenticated) {\r\n            return (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"login-container row no-gutters\">\r\n                <button onClick={()=>{\r\n                    this.props.setAuthentication(false)\r\n                }}>Logout</button>\r\n                <ul>\r\n                    {this.props.employeesData && this.props.employeesData.length > 0 && this.props.employeesData.map((emp,index) => {\r\n                        let empDetails = [];\r\n                        for (let [key, value] of Object.entries(emp)) {\r\n                            empDetails.push(<div key={key}>\r\n                                {key}{value}\r\n                            </div>)\r\n                        }\r\n                        return (\r\n                            <div key={index} className=\"col-12\">{empDetails}<br /></div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Employee;\r\n","import { connect } from \"react-redux\";\r\nimport * as EmployeeActions from \"../actions/EmployeeActions\";\r\nimport React from \"react\";\r\nimport Employee from \"../components/Employee\";\r\n\r\nclass EmployeeConnector extends React.Component {\r\n  render() {\r\n    return <Employee {...this.props} />;\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isAuthenticated: state.employeeReducer.isAuthenticated,\r\n    employeesData: state.employeeReducer.employeesData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleAuthentication: (username, password) =>\r\n      dispatch(EmployeeActions.handleAuthentication(username, password)),\r\n      setEmployeesData: (employeesData) =>\r\n      dispatch(EmployeeActions.setEmployeesData(employeesData)),\r\n      setAuthentication: (isAuthenticated) => dispatch(EmployeeActions.setAuthentication(isAuthenticated)),\r\n\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeConnector);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, BrowserRouter, Route, } from \"react-router-dom\";\nimport DashboardConnector from \"./connectors/DashboardConnector\";\nimport EmployeeConnector from \"./connectors/EmployeeConnector\";\n\nfunction App() {\n  \n  return (\n    <BrowserRouter>\n      <div className=\"App container\">\n        <Switch>\n          <Route exact path=\"/dashboard\" component={DashboardConnector} />\n          <Route exact path=\"/employee\" component={EmployeeConnector} />\n          <Route path=\"/\" component={DashboardConnector}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\r\n   isAuthenticated: false,\r\n   username: \"\",\r\n   password: \"\",\r\n   employeesData: null\r\n  };\r\n  ","\r\nimport {combineReducers} from 'redux';\r\nimport employeeReducer from './EmployeeReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    employeeReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import initialState from \"./InitialState\";\r\nimport * as actionKeys from \"../actions/ActionTypes\";\r\n\r\nexport default function employeeReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actionKeys.HANDLE_AUTHENTICATION:\r\n      return {\r\n        ...state,\r\n        username: action.username,\r\n        password: action.password\r\n      };\r\n    case actionKeys.SET_AUTHENTICATION:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: action.isAuthenticated\r\n      };\r\n    case actionKeys.SET_EMPLOYEES_DATA:\r\n      return {\r\n        ...state,\r\n        employeesData: action.employeesData\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {createStore,compose, applyMiddleware} from 'redux';\r\nimport rootReducer from '../reducers/RootReducer';\r\nimport thunk from 'redux-thunk';\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport default function configureStore() {\r\n  return createStore(\r\n    rootReducer,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/ConfigureStore\";\nimport { Provider } from 'react-redux'\n\nconst store = configureStore();\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}